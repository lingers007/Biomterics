//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5420.
// 
#pragma warning disable 1591

namespace BioPluginWebApp.bioPluginService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BioPluginServiceSoap", Namespace="http://tempuri.org/")]
    public partial class BioPluginService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefreshCacheOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterExOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateExOperationCompleted;
        
        private System.Threading.SendOrPostCallback IdentifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback IdentifyQuickOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifySingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterSingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsRegisteredOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BioPluginService() {
            this.Url = global::BioPluginWebApp.Properties.Settings.Default.BioPluginWebApp_bioPluginService_BioPluginService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetInfoCompletedEventHandler GetInfoCompleted;
        
        /// <remarks/>
        public event RefreshCacheCompletedEventHandler RefreshCacheCompleted;
        
        /// <remarks/>
        public event RegisterExCompletedEventHandler RegisterExCompleted;
        
        /// <remarks/>
        public event UpdateExCompletedEventHandler UpdateExCompleted;
        
        /// <remarks/>
        public event IdentifyCompletedEventHandler IdentifyCompleted;
        
        /// <remarks/>
        public event IdentifyQuickCompletedEventHandler IdentifyQuickCompleted;
        
        /// <remarks/>
        public event VerifySingleCompletedEventHandler VerifySingleCompleted;
        
        /// <remarks/>
        public event VerifyCompletedEventHandler VerifyCompleted;
        
        /// <remarks/>
        public event RegisterSingleCompletedEventHandler RegisterSingleCompleted;
        
        /// <remarks/>
        public event UpdateSingleCompletedEventHandler UpdateSingleCompleted;
        
        /// <remarks/>
        public event RegisterCompletedEventHandler RegisterCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event DeleteIDCompletedEventHandler DeleteIDCompleted;
        
        /// <remarks/>
        public event ChangeIDCompletedEventHandler ChangeIDCompleted;
        
        /// <remarks/>
        public event IsRegisteredCompletedEventHandler IsRegisteredCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInfo() {
            object[] results = this.Invoke("GetInfo", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInfoAsync() {
            this.GetInfoAsync(null);
        }
        
        /// <remarks/>
        public void GetInfoAsync(object userState) {
            if ((this.GetInfoOperationCompleted == null)) {
                this.GetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInfoOperationCompleted);
            }
            this.InvokeAsync("GetInfo", new object[0], this.GetInfoOperationCompleted, userState);
        }
        
        private void OnGetInfoOperationCompleted(object arg) {
            if ((this.GetInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInfoCompleted(this, new GetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RefreshCache", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RefreshCache(string engineName) {
            object[] results = this.Invoke("RefreshCache", new object[] {
                        engineName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RefreshCacheAsync(string engineName) {
            this.RefreshCacheAsync(engineName, null);
        }
        
        /// <remarks/>
        public void RefreshCacheAsync(string engineName, object userState) {
            if ((this.RefreshCacheOperationCompleted == null)) {
                this.RefreshCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefreshCacheOperationCompleted);
            }
            this.InvokeAsync("RefreshCache", new object[] {
                        engineName}, this.RefreshCacheOperationCompleted, userState);
        }
        
        private void OnRefreshCacheOperationCompleted(object arg) {
            if ((this.RefreshCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefreshCacheCompleted(this, new RefreshCacheCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RegisterEx(string RegistrationID, string LeftEnrollTemplate, int LeftFingerType, string RightEnrollTemplate, int RightFingerType, string LeftCaptureTemplate, string RightCaptureTemplate, int LocationID) {
            object[] results = this.Invoke("RegisterEx", new object[] {
                        RegistrationID,
                        LeftEnrollTemplate,
                        LeftFingerType,
                        RightEnrollTemplate,
                        RightFingerType,
                        LeftCaptureTemplate,
                        RightCaptureTemplate,
                        LocationID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterExAsync(string RegistrationID, string LeftEnrollTemplate, int LeftFingerType, string RightEnrollTemplate, int RightFingerType, string LeftCaptureTemplate, string RightCaptureTemplate, int LocationID) {
            this.RegisterExAsync(RegistrationID, LeftEnrollTemplate, LeftFingerType, RightEnrollTemplate, RightFingerType, LeftCaptureTemplate, RightCaptureTemplate, LocationID, null);
        }
        
        /// <remarks/>
        public void RegisterExAsync(string RegistrationID, string LeftEnrollTemplate, int LeftFingerType, string RightEnrollTemplate, int RightFingerType, string LeftCaptureTemplate, string RightCaptureTemplate, int LocationID, object userState) {
            if ((this.RegisterExOperationCompleted == null)) {
                this.RegisterExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterExOperationCompleted);
            }
            this.InvokeAsync("RegisterEx", new object[] {
                        RegistrationID,
                        LeftEnrollTemplate,
                        LeftFingerType,
                        RightEnrollTemplate,
                        RightFingerType,
                        LeftCaptureTemplate,
                        RightCaptureTemplate,
                        LocationID}, this.RegisterExOperationCompleted, userState);
        }
        
        private void OnRegisterExOperationCompleted(object arg) {
            if ((this.RegisterExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterExCompleted(this, new RegisterExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateEx(string ID, string LeftUpdateTemplate, int LeftFingerType, string RightUpdateTemplate, int RightFingerType, string LeftCaptureTemplate, string RightCaptureTemplate, int LocationID) {
            object[] results = this.Invoke("UpdateEx", new object[] {
                        ID,
                        LeftUpdateTemplate,
                        LeftFingerType,
                        RightUpdateTemplate,
                        RightFingerType,
                        LeftCaptureTemplate,
                        RightCaptureTemplate,
                        LocationID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateExAsync(string ID, string LeftUpdateTemplate, int LeftFingerType, string RightUpdateTemplate, int RightFingerType, string LeftCaptureTemplate, string RightCaptureTemplate, int LocationID) {
            this.UpdateExAsync(ID, LeftUpdateTemplate, LeftFingerType, RightUpdateTemplate, RightFingerType, LeftCaptureTemplate, RightCaptureTemplate, LocationID, null);
        }
        
        /// <remarks/>
        public void UpdateExAsync(string ID, string LeftUpdateTemplate, int LeftFingerType, string RightUpdateTemplate, int RightFingerType, string LeftCaptureTemplate, string RightCaptureTemplate, int LocationID, object userState) {
            if ((this.UpdateExOperationCompleted == null)) {
                this.UpdateExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateExOperationCompleted);
            }
            this.InvokeAsync("UpdateEx", new object[] {
                        ID,
                        LeftUpdateTemplate,
                        LeftFingerType,
                        RightUpdateTemplate,
                        RightFingerType,
                        LeftCaptureTemplate,
                        RightCaptureTemplate,
                        LocationID}, this.UpdateExOperationCompleted, userState);
        }
        
        private void OnUpdateExOperationCompleted(object arg) {
            if ((this.UpdateExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateExCompleted(this, new UpdateExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Identify", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Identify(string LeftCaptureTemplate, int LeftDataSize, int LeftDataValue, string RightCaptureTemplate, int RightDataSize, int RightDataValue, int LocationID) {
            object[] results = this.Invoke("Identify", new object[] {
                        LeftCaptureTemplate,
                        LeftDataSize,
                        LeftDataValue,
                        RightCaptureTemplate,
                        RightDataSize,
                        RightDataValue,
                        LocationID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IdentifyAsync(string LeftCaptureTemplate, int LeftDataSize, int LeftDataValue, string RightCaptureTemplate, int RightDataSize, int RightDataValue, int LocationID) {
            this.IdentifyAsync(LeftCaptureTemplate, LeftDataSize, LeftDataValue, RightCaptureTemplate, RightDataSize, RightDataValue, LocationID, null);
        }
        
        /// <remarks/>
        public void IdentifyAsync(string LeftCaptureTemplate, int LeftDataSize, int LeftDataValue, string RightCaptureTemplate, int RightDataSize, int RightDataValue, int LocationID, object userState) {
            if ((this.IdentifyOperationCompleted == null)) {
                this.IdentifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIdentifyOperationCompleted);
            }
            this.InvokeAsync("Identify", new object[] {
                        LeftCaptureTemplate,
                        LeftDataSize,
                        LeftDataValue,
                        RightCaptureTemplate,
                        RightDataSize,
                        RightDataValue,
                        LocationID}, this.IdentifyOperationCompleted, userState);
        }
        
        private void OnIdentifyOperationCompleted(object arg) {
            if ((this.IdentifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IdentifyCompleted(this, new IdentifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IdentifyQuick", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IdentifyQuick(string CaptureTemplate, int DataSize, int DataValue, int LocationID) {
            object[] results = this.Invoke("IdentifyQuick", new object[] {
                        CaptureTemplate,
                        DataSize,
                        DataValue,
                        LocationID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IdentifyQuickAsync(string CaptureTemplate, int DataSize, int DataValue, int LocationID) {
            this.IdentifyQuickAsync(CaptureTemplate, DataSize, DataValue, LocationID, null);
        }
        
        /// <remarks/>
        public void IdentifyQuickAsync(string CaptureTemplate, int DataSize, int DataValue, int LocationID, object userState) {
            if ((this.IdentifyQuickOperationCompleted == null)) {
                this.IdentifyQuickOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIdentifyQuickOperationCompleted);
            }
            this.InvokeAsync("IdentifyQuick", new object[] {
                        CaptureTemplate,
                        DataSize,
                        DataValue,
                        LocationID}, this.IdentifyQuickOperationCompleted, userState);
        }
        
        private void OnIdentifyQuickOperationCompleted(object arg) {
            if ((this.IdentifyQuickCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IdentifyQuickCompleted(this, new IdentifyQuickCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifySingle", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifySingle(string CaptureTemplate, string ID, int LocationID) {
            object[] results = this.Invoke("VerifySingle", new object[] {
                        CaptureTemplate,
                        ID,
                        LocationID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifySingleAsync(string CaptureTemplate, string ID, int LocationID) {
            this.VerifySingleAsync(CaptureTemplate, ID, LocationID, null);
        }
        
        /// <remarks/>
        public void VerifySingleAsync(string CaptureTemplate, string ID, int LocationID, object userState) {
            if ((this.VerifySingleOperationCompleted == null)) {
                this.VerifySingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifySingleOperationCompleted);
            }
            this.InvokeAsync("VerifySingle", new object[] {
                        CaptureTemplate,
                        ID,
                        LocationID}, this.VerifySingleOperationCompleted, userState);
        }
        
        private void OnVerifySingleOperationCompleted(object arg) {
            if ((this.VerifySingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifySingleCompleted(this, new VerifySingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Verify", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Verify(string LeftCaptureTemplate, string RightCaptureTemplate, string ID, int LocationID) {
            object[] results = this.Invoke("Verify", new object[] {
                        LeftCaptureTemplate,
                        RightCaptureTemplate,
                        ID,
                        LocationID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyAsync(string LeftCaptureTemplate, string RightCaptureTemplate, string ID, int LocationID) {
            this.VerifyAsync(LeftCaptureTemplate, RightCaptureTemplate, ID, LocationID, null);
        }
        
        /// <remarks/>
        public void VerifyAsync(string LeftCaptureTemplate, string RightCaptureTemplate, string ID, int LocationID, object userState) {
            if ((this.VerifyOperationCompleted == null)) {
                this.VerifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyOperationCompleted);
            }
            this.InvokeAsync("Verify", new object[] {
                        LeftCaptureTemplate,
                        RightCaptureTemplate,
                        ID,
                        LocationID}, this.VerifyOperationCompleted, userState);
        }
        
        private void OnVerifyOperationCompleted(object arg) {
            if ((this.VerifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyCompleted(this, new VerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterSingle", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RegisterSingle(string EnrollTemplate, int FingerType, string ID, int LocationID) {
            object[] results = this.Invoke("RegisterSingle", new object[] {
                        EnrollTemplate,
                        FingerType,
                        ID,
                        LocationID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterSingleAsync(string EnrollTemplate, int FingerType, string ID, int LocationID) {
            this.RegisterSingleAsync(EnrollTemplate, FingerType, ID, LocationID, null);
        }
        
        /// <remarks/>
        public void RegisterSingleAsync(string EnrollTemplate, int FingerType, string ID, int LocationID, object userState) {
            if ((this.RegisterSingleOperationCompleted == null)) {
                this.RegisterSingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterSingleOperationCompleted);
            }
            this.InvokeAsync("RegisterSingle", new object[] {
                        EnrollTemplate,
                        FingerType,
                        ID,
                        LocationID}, this.RegisterSingleOperationCompleted, userState);
        }
        
        private void OnRegisterSingleOperationCompleted(object arg) {
            if ((this.RegisterSingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterSingleCompleted(this, new RegisterSingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSingle", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateSingle(string UpdateTemplate, int FingerType, string ID, int LocationID) {
            object[] results = this.Invoke("UpdateSingle", new object[] {
                        UpdateTemplate,
                        FingerType,
                        ID,
                        LocationID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSingleAsync(string UpdateTemplate, int FingerType, string ID, int LocationID) {
            this.UpdateSingleAsync(UpdateTemplate, FingerType, ID, LocationID, null);
        }
        
        /// <remarks/>
        public void UpdateSingleAsync(string UpdateTemplate, int FingerType, string ID, int LocationID, object userState) {
            if ((this.UpdateSingleOperationCompleted == null)) {
                this.UpdateSingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSingleOperationCompleted);
            }
            this.InvokeAsync("UpdateSingle", new object[] {
                        UpdateTemplate,
                        FingerType,
                        ID,
                        LocationID}, this.UpdateSingleOperationCompleted, userState);
        }
        
        private void OnUpdateSingleOperationCompleted(object arg) {
            if ((this.UpdateSingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSingleCompleted(this, new UpdateSingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Register", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Register(string LeftEnrollTemplate, int LeftFingerType, string RightEnrollTemplate, int RightFingerType, string ID, int LocationID) {
            object[] results = this.Invoke("Register", new object[] {
                        LeftEnrollTemplate,
                        LeftFingerType,
                        RightEnrollTemplate,
                        RightFingerType,
                        ID,
                        LocationID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterAsync(string LeftEnrollTemplate, int LeftFingerType, string RightEnrollTemplate, int RightFingerType, string ID, int LocationID) {
            this.RegisterAsync(LeftEnrollTemplate, LeftFingerType, RightEnrollTemplate, RightFingerType, ID, LocationID, null);
        }
        
        /// <remarks/>
        public void RegisterAsync(string LeftEnrollTemplate, int LeftFingerType, string RightEnrollTemplate, int RightFingerType, string ID, int LocationID, object userState) {
            if ((this.RegisterOperationCompleted == null)) {
                this.RegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterOperationCompleted);
            }
            this.InvokeAsync("Register", new object[] {
                        LeftEnrollTemplate,
                        LeftFingerType,
                        RightEnrollTemplate,
                        RightFingerType,
                        ID,
                        LocationID}, this.RegisterOperationCompleted, userState);
        }
        
        private void OnRegisterOperationCompleted(object arg) {
            if ((this.RegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Update(string LeftUpdateTemplate, int LeftFingerType, string RightUpdateTemplate, int RightFingerType, string ID, int LocationID) {
            object[] results = this.Invoke("Update", new object[] {
                        LeftUpdateTemplate,
                        LeftFingerType,
                        RightUpdateTemplate,
                        RightFingerType,
                        ID,
                        LocationID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAsync(string LeftUpdateTemplate, int LeftFingerType, string RightUpdateTemplate, int RightFingerType, string ID, int LocationID) {
            this.UpdateAsync(LeftUpdateTemplate, LeftFingerType, RightUpdateTemplate, RightFingerType, ID, LocationID, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(string LeftUpdateTemplate, int LeftFingerType, string RightUpdateTemplate, int RightFingerType, string ID, int LocationID, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        LeftUpdateTemplate,
                        LeftFingerType,
                        RightUpdateTemplate,
                        RightFingerType,
                        ID,
                        LocationID}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteID(string ID, string engineName) {
            object[] results = this.Invoke("DeleteID", new object[] {
                        ID,
                        engineName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteIDAsync(string ID, string engineName) {
            this.DeleteIDAsync(ID, engineName, null);
        }
        
        /// <remarks/>
        public void DeleteIDAsync(string ID, string engineName, object userState) {
            if ((this.DeleteIDOperationCompleted == null)) {
                this.DeleteIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteIDOperationCompleted);
            }
            this.InvokeAsync("DeleteID", new object[] {
                        ID,
                        engineName}, this.DeleteIDOperationCompleted, userState);
        }
        
        private void OnDeleteIDOperationCompleted(object arg) {
            if ((this.DeleteIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteIDCompleted(this, new DeleteIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangeID(string Old_ID, string New_ID, string engineName) {
            object[] results = this.Invoke("ChangeID", new object[] {
                        Old_ID,
                        New_ID,
                        engineName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeIDAsync(string Old_ID, string New_ID, string engineName) {
            this.ChangeIDAsync(Old_ID, New_ID, engineName, null);
        }
        
        /// <remarks/>
        public void ChangeIDAsync(string Old_ID, string New_ID, string engineName, object userState) {
            if ((this.ChangeIDOperationCompleted == null)) {
                this.ChangeIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeIDOperationCompleted);
            }
            this.InvokeAsync("ChangeID", new object[] {
                        Old_ID,
                        New_ID,
                        engineName}, this.ChangeIDOperationCompleted, userState);
        }
        
        private void OnChangeIDOperationCompleted(object arg) {
            if ((this.ChangeIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeIDCompleted(this, new ChangeIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsRegistered", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsRegistered(string ID, string engineName) {
            object[] results = this.Invoke("IsRegistered", new object[] {
                        ID,
                        engineName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsRegisteredAsync(string ID, string engineName) {
            this.IsRegisteredAsync(ID, engineName, null);
        }
        
        /// <remarks/>
        public void IsRegisteredAsync(string ID, string engineName, object userState) {
            if ((this.IsRegisteredOperationCompleted == null)) {
                this.IsRegisteredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsRegisteredOperationCompleted);
            }
            this.InvokeAsync("IsRegistered", new object[] {
                        ID,
                        engineName}, this.IsRegisteredOperationCompleted, userState);
        }
        
        private void OnIsRegisteredOperationCompleted(object arg) {
            if ((this.IsRegisteredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsRegisteredCompleted(this, new IsRegisteredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetInfoCompletedEventHandler(object sender, GetInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RefreshCacheCompletedEventHandler(object sender, RefreshCacheCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefreshCacheCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefreshCacheCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RegisterExCompletedEventHandler(object sender, RegisterExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void UpdateExCompletedEventHandler(object sender, UpdateExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void IdentifyCompletedEventHandler(object sender, IdentifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IdentifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IdentifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void IdentifyQuickCompletedEventHandler(object sender, IdentifyQuickCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IdentifyQuickCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IdentifyQuickCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void VerifySingleCompletedEventHandler(object sender, VerifySingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifySingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifySingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void VerifyCompletedEventHandler(object sender, VerifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RegisterSingleCompletedEventHandler(object sender, RegisterSingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterSingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterSingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void UpdateSingleCompletedEventHandler(object sender, UpdateSingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RegisterCompletedEventHandler(object sender, RegisterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void UpdateCompletedEventHandler(object sender, UpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void DeleteIDCompletedEventHandler(object sender, DeleteIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ChangeIDCompletedEventHandler(object sender, ChangeIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void IsRegisteredCompletedEventHandler(object sender, IsRegisteredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsRegisteredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsRegisteredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591